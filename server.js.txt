// Import required modules
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');

// Initialize Express and HTTP server
const app = express();
const server = http.createServer(app);
const io = new Server(server);

// In-memory storage for chats
let chats = {};

// Serve static files from the public directory
app.use(express.static(__dirname + '/public'));

// Handle user connections
io.on('connection', (socket) => {
  const userId = socket.id;
  console.log(`New user connected: ${userId}`);

  // Create a new chat session for the user if it doesn't exist
  if (!chats[userId]) {
    chats[userId] = [];
  }

  // Listen for messages from the user
  socket.on('userMessage', (msg) => {
    console.log(`User ${userId} sent: ${msg}`);
    chats[userId].push({ sender: 'user', message: msg });

    // Emit the message to the moderator
    io.emit('newMessageForModerator', { userId, message: msg });
  });

  // Listen for messages from the moderator
  socket.on('moderatorMessage', ({ userId, message }) => {
    if (chats[userId]) {
      chats[userId].push({ sender: 'moderator', message });
      io.to(userId).emit('moderatorMessage', message); // Send back to the user
    }
  });

  // Handle user disconnection
  socket.on('disconnect', () => {
    console.log(`User disconnected: ${userId}`);
  });
});

// Route to serve the moderator panel
app.get('/moderator', (req, res) => {
  res.sendFile(__dirname + '/public/moderator.html');
});

// Start the server
server.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});

// HTML for User Interface (public/index.html)
const userHTML = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Anonymous Chat</title>
  <style>
    body { font-family: Arial, sans-serif; }
    #chat-box { border: 1px solid #000; width: 300px; height: 400px; overflow-y: scroll; margin-bottom: 10px; }
    #message { width: 200px; }
  </style>
</head>
<body>
  <h2>Anonymous Chat</h2>
  <div id="chat-box"></div>
  <input id="message" type="text" placeholder="Enter your message...">
  <button id="send-btn">Send</button>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    const chatBox = document.getElementById('chat-box');
    const messageInput = document.getElementById('message');
    const sendBtn = document.getElementById('send-btn');

    sendBtn.addEventListener('click', () => {
      const message = messageInput.value;
      if (message) {
        socket.emit('userMessage', message);
        messageInput.value = '';
        addMessageToChat('You', message);
      }
    });

    socket.on('moderatorMessage', (msg) => {
      addMessageToChat('Moderator', msg);
    });

    function addMessageToChat(sender, msg) {
      const messageElement = document.createElement('p');
      messageElement.textContent = \`\${sender}: \${msg}\`;
      chatBox.appendChild(messageElement);
      chatBox.scrollTop = chatBox.scrollHeight;
    }
  </script>
</body>
</html>
`;

// HTML for Moderator Interface (public/moderator.html)
const moderatorHTML = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Moderator Panel</title>
  <style>
    body { font-family: Arial, sans-serif; }
    #chat-area { width: 300px; height: 400px; border: 1px solid #000; overflow-y: scroll; margin-bottom: 10px; }
    #response { width: 200px; }
  </style>
</head>
<body>
  <h2>Moderator Panel</h2>
  <div id="user-list">
    <h3>Users</h3>
    <ul id="user-list-ul"></ul>
  </div>
  <div id="chat-area"></div>
  <input id="response" type="text" placeholder="Respond...">
  <button id="respond-btn">Send</button>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    let activeUserId = null;

    const userListUl = document.getElementById('user-list-ul');
    const chatArea = document.getElementById('chat-area');
    const responseInput = document.getElementById('response');
    const respondBtn = document.getElementById('respond-btn');

    socket.on('newMessageForModerator', ({ userId, message }) => {
      if (!document.getElementById(\`user-\${userId}\`)) {
        const userElement = document.createElement('li');
        userElement.textContent = \`User \${userId}\`;
        userElement.id = \`user-\${userId}\`;
        userElement.addEventListener('click', () => {
          activeUserId = userId;
          chatArea.innerHTML = '';
          addMessageToChat('User', message);
        });
        userListUl.appendChild(userElement);
      } else if (activeUserId === userId) {
        addMessageToChat('User', message);
      }
    });

    respondBtn.addEventListener('click', () => {
      const message = responseInput.value;
      if (message && activeUserId) {
        socket.emit('moderatorMessage', { userId: activeUserId, message });
        responseInput.value = '';
        addMessageToChat('Moderator', message);
      }
    });

    function addMessageToChat(sender, msg) {
      const messageElement = document.createElement('p');
      messageElement.textContent = \`\${sender}: \${msg}\`;
      chatArea.appendChild(messageElement);
      chatArea.scrollTop = chatArea.scrollHeight;
    }
  </script>
</body>
</html>
`;

// Write the static files to the public directory
const fs = require('fs');
const path = require('path');

// Create the 'public' directory if it doesn't exist
if (!fs.existsSync(path.join(__dirname, 'public'))) {
  fs.mkdirSync(path.join(__dirname, 'public'));
}

// Write the HTML files
fs.writeFileSync(path.join(__dirname, 'public', 'index.html'), userHTML);
fs.writeFileSync(path.join(__dirname, 'public', 'moderator.html'), moderatorHTML);
